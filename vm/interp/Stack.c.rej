diff a/vm/interp/Stack.c b/vm/interp/Stack.c	(rejected hunks)
@@ -531,7 +623,12 @@ void dvmCallMethodV(Thread* self, const Method* method, Object* obj,
         TRACE_METHOD_EXIT(self, method);
 #endif
     } else {
+#ifdef WITH_TAINT_TRACKING
+	u4 rtaint; /* not used */
+        dvmInterpret(self, method, pResult, &rtaint);
+#else
         dvmInterpret(self, method, pResult);
+#endif
     }
 
 bail:
@@ -637,7 +817,12 @@ void dvmCallMethodA(Thread* self, const Method* method, Object* obj,
         TRACE_METHOD_EXIT(self, method);
 #endif
     } else {
+#ifdef WITH_TAINT_TRACKING
+	u4 rtaint; /* not used */
+        dvmInterpret(self, method, pResult, &rtaint);
+#else
         dvmInterpret(self, method, pResult);
+#endif
     }
 
 bail:
@@ -666,6 +851,17 @@ Object* dvmInvokeMethod(Object* obj, const Method* method,
     int verifyCount, argListLength;
     JValue retval;
 
+#ifdef WITH_TAINT_TRACKING
+    u4 rtaint = TAINT_CLEAR;
+    int slot_cnt = 0;
+    bool nativeTarget = dvmIsNativeMethod(method);
+    /* For simplicity, argument tags for native targets
+     * are unioned. This may cause false positives, but
+     * it is the easiest way to handle this for now.
+     */
+    u4 nativeTag = TAINT_CLEAR;
+#endif
+
     /* verify arg count */
     if (argList != NULL)
         argListLength = argList->length;
@@ -684,7 +880,18 @@ Object* dvmInvokeMethod(Object* obj, const Method* method,
         return NULL;
 
     /* "ins" for new frame start at frame pointer plus locals */
+#ifdef WITH_TAINT_TRACKING
+    if (nativeTarget) {
+	/* native target, no taint tag interleaving */
+	ins = ((s4*)self->curFrame) + (method->registersSize - method->insSize);
+    } else {
+	/* interpreted target, taint tags are interleaved */
+	ins = ((s4*)self->curFrame) + 
+	    ((method->registersSize - method->insSize) << 1);
+    }
+#else
     ins = ((s4*)self->curFrame) + (method->registersSize - method->insSize);
+#endif
     verifyCount = 0;
 
     //LOGD("  FP is %p, INs live at >= %p\n", self->curFrame, ins);
@@ -722,10 +937,47 @@ Object* dvmInvokeMethod(Object* obj, const Method* method,
             goto bail_popped;
         }
 
+#ifdef WITH_TAINT_TRACKING
+	/* dvmConvertArgument() returns -1, 1, or 2 */
+	if (nativeTarget) {
+	    nativeTag |= tag; /* TODO: is there a better way to do this?*/
+	    ins += width;
+	} else {
+	    if (width == 2) {
+		ins[2] = ins[1];
+		ins[1] = tag;
+		ins[3] = tag;
+		ins += 4;
+	    } else if (width == 1) {
+		ins[1] = tag;
+		ins += 2;
+	    } else { /* error condition duplicated from above */
+		dvmPopFrame(self);
+		dvmThrowException("Ljava/lang/IllegalArgumentException;",
+		    "argument type mismatch");
+		goto bail_popped;
+	    }
+	}
+	slot_cnt += width;
+#else
         ins += width;
+#endif
         verifyCount += width;
     }
 
+#ifdef WITH_TAINT_TRACKING
+    /* native hack spacer */
+    *ins++ = TAINT_CLEAR; /* if nativeTarget, this is return taint */
+    {
+	int i;
+	if (nativeTarget) {
+	    for (i = 0; i < slot_cnt; i++) {
+		*ins++ = nativeTag; /* TODO: better way? */
+	    }
+	}
+    }
+#endif
+
     if (verifyCount != method->insSize) {
         LOGE("Got vfycount=%d insSize=%d for %s.%s\n", verifyCount,
             method->insSize, clazz->descriptor, method->name);
@@ -746,8 +998,15 @@ Object* dvmInvokeMethod(Object* obj, const Method* method,
 #ifdef WITH_PROFILER
         TRACE_METHOD_EXIT(self, method);
 #endif
+#ifdef WITH_TAINT_TRACKING
+	rtaint = ((u4*)self->curFrame)[slot_cnt];
+#endif
     } else {
+#ifdef WITH_TAINT_TRACKING
+        dvmInterpret(self, method, &retval, &rtaint);
+#else
         dvmInterpret(self, method, &retval);
+#endif
     }
 
     /*
