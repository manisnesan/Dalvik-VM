# Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Configuration for ARMv7-A targets.
#
# This target includes Thumb-2 and Thumb2-EE support, as well as VFPLite.
#
# The difference in performance between this and ARMv5TE appears to be
# negligible on a Cortex-A8 CPU, so this is really just an experiment.
#

handler-size 64

# source for the instruction table stub
asm-stub armv5te/stub.S

# file header and basic definitions
import c/header.c
import armv5te_taint/header.S

# C pre-processor defines for stub C instructions
import cstubs/stubdefs.c

# highly-platform-specific defs
import armv7-a/platform.S

# common defs for the C helpers; include this before the instruction handlers
import c/opcommon.c

# arch-specific entry point to interpreter
import armv5te_taint/entry.S
#import armv5te/entry.S

# opcode list; argument to op-start is default directory
op-start armv5te_taint
	# bincmp.S (unmodified)
	op OP_IF_EQ armv6t2_taint
	op OP_IF_GE armv6t2_taint
	op OP_IF_GT armv6t2_taint
	op OP_IF_LE armv6t2_taint
	op OP_IF_LT armv6t2_taint
	op OP_IF_NE armv6t2_taint
    
	# binop2addr.S
	op OP_ADD_FLOAT_2ADDR armv6t2_taint    
	op OP_ADD_INT_2ADDR armv6t2_taint
	op OP_AND_INT_2ADDR armv6t2_taint
	op OP_DIV_FLOAT_2ADDR armv6t2_taint
	op OP_DIV_INT_2ADDR armv6t2_taint
	op OP_MUL_FLOAT_2ADDR armv6t2_taint
	op OP_MUL_INT_2ADDR armv6t2_taint
	op OP_OR_INT_2ADDR armv6t2_taint
	op OP_REM_FLOAT_2ADDR armv6t2_taint
	op OP_REM_INT_2ADDR armv6t2_taint
	op OP_SHL_INT_2ADDR armv6t2_taint
	op OP_SHR_INT_2ADDR armv6t2_taint
	op OP_SUB_FLOAT_2ADDR armv6t2_taint
	op OP_SUB_INT_2ADDR armv6t2_taint
	op OP_USHR_INT_2ADDR armv6t2_taint
	op OP_XOR_INT_2ADDR armv6t2_taint

	# unop.S
	op OP_FLOAT_TO_INT armv6t2_taint
	op OP_INT_TO_BYTE armv6t2_taint
	op OP_INT_TO_CHAR armv6t2_taint
	op OP_INT_TO_FLOAT armv6t2_taint
	op OP_INT_TO_SHORT armv6t2_taint
	op OP_NEG_FLOAT armv6t2_taint
	op OP_NEG_INT armv6t2_taint
	op OP_NOT_INT armv6t2_taint


	# arm-vfp_taint

	# fbinop.S
	op OP_ADD_FLOAT arm-vfp_taint
	op OP_DIV_FLOAT arm-vfp_taint
	op OP_MUL_FLOAT arm-vfp_taint
	op OP_SUB_FLOAT arm-vfp_taint

	# funops.S
	op OP_FLOAT_TO_INT arm-vfp_taint
	op OP_INT_TO_FLOAT arm-vfp_taint

	# fbinop2addr.S
	op OP_ADD_FLOAT_2ADDR arm-vfp_taint
	op OP_DIV_FLOAT_2ADDR arm-vfp_taint
	op OP_MUL_FLOAT_2ADDR arm-vfp_taint
	op OP_SUB_FLOAT_2ADDR arm-vfp_taint

	# fbinopWide.S
	op OP_ADD_DOUBLE arm-vfp_taint
	op OP_DIV_DOUBLE arm-vfp_taint
	op OP_MUL_DOUBLE arm-vfp_taint
	op OP_SUB_DOUBLE arm-vfp_taint	

	# fbinopWide2addr.S
	op OP_ADD_DOUBLE_2ADDR arm-vfp_taint
	op OP_DIV_DOUBLE_2ADDR arm-vfp_taint
	op OP_MUL_DOUBLE_2ADDR arm-vfp_taint
	op OP_SUB_DOUBLE_2ADDR arm-vfp_taint

	# funopNarrower.S
	op OP_DOUBLE_TO_INT arm-vfp_taint
	op OP_DOUBLE_TO_FLOAT arm-vfp_taint

	# funopWider.S
	op OP_INT_TO_DOUBLE arm-vfp_taint
	op OP_FLOAT_TO_DOUBLE arm-vfp_taint	

	# cmp
	op OP_CMPG_DOUBLE arm-vfp_taint
	op OP_CMPG_FLOAT arm-vfp_taint
	op OP_CMPL_DOUBLE arm-vfp_taint
	op OP_CMPL_FLOAT arm-vfp_taint

	# still using c versions for invoking native code
	op OP_INVOKE_DIRECT_RANGE c
	op OP_INVOKE_DIRECT c
	op OP_INVOKE_INTERFACE_RANGE c
	op OP_INVOKE_INTERFACE c
	op OP_INVOKE_STATIC_RANGE c
	op OP_INVOKE_STATIC c
	op OP_INVOKE_SUPER_QUICK_RANGE c
	op OP_INVOKE_SUPER_QUICK c
	op OP_INVOKE_SUPER_RANGE c
	op OP_INVOKE_SUPER c
	op OP_INVOKE_VIRTUAL_QUICK_RANGE c
	op OP_INVOKE_VIRTUAL_QUICK c
	op OP_INVOKE_VIRTUAL_RANGE c
	op OP_INVOKE_VIRTUAL c
op-end

# "helper" code for C; include if you use any of the C stubs (this generates
# object code, so it's normally excluded)
import c/gotoTargets.c

# end of defs; include this when cstubs/stubdefs.c is included
import cstubs/enddefs.c

# common subroutines for asm
import armv5te_taint/footer.S
import armv5te/debug.c
